// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ROLS {
  Contratante
  Contratista
  Supervisor
  Representante_Legal
  Directivo
  Admin
}

model User {
  id           String     @id @default(uuid())
  name         String
  lastname     String
  username     String     @unique
  password     String
  role         ROLS       @default(Contratante)
  dependency   Dependecy? @relation(fields: [dependencyId], references: [id])
  dependencyId String?

  state        Boolean?
  Contratist   Contratist? @relation(fields: [contratistId], references: [id])
  contratistId String?
}

model Dependecy {
  id    String @id @default(uuid())
  name  String @unique
  work  Work[]
  users User[]
}

model Work {
  id                String         @id @default(uuid())
  name              String
  location          String
  contratist        String
  projects          String
  financialProgress Int
  physicalProgress  Int
  fronProject       FrontProject[]
  dependency        Dependecy      @relation(fields: [dependencyId], references: [id])
  dependencyId      String         @unique
  Contratist        Contratist?    @relation(fields: [contratistId], references: [id])
  contratistId      String?
}

model Contratist {
  id      String @id @default(uuid())
  company String @unique
  users   User[]
  works   Work[]
}

model FrontProject {
  id           String       @id @default(uuid())
  name         String       @unique
  contract     String
  minutas      String
  estimations  Estimations?
  reportId     String?
  report       Report?      @relation(fields: [reportId], references: [id])
  multimediaId String?
  multimedia   Multimedia?  @relation(fields: [multimediaId], references: [id])
  Work         Work?        @relation(fields: [workId], references: [id])
  workId       String?
  catalogo     Catalogo?
}

model Catalogo {
  id      String       @id @default(uuid())
  name    String
  descrip String
  front   FrontProject @relation(fields: [frontId], references: [id])
  frontId String       @unique
  concept Concept[]
}

model Concept {
  id         String    @id @default(uuid())
  name       String
  ref        String
  cant       Int
  price      Float
  total      Float
  Catalogo   Catalogo? @relation(fields: [catalogoId], references: [id])
  catalogoId String?
}

model Estimations {
  id             String       @id @default(uuid())
  name           String
  date           DateTime     @default(now())
  url            String
  frontProjectId String       @unique
  frontProject   FrontProject @relation(fields: [frontProjectId], references: [id])
}

model caratulaEstim {
  id                  String        @id @default(uuid())
  resumen             resumenEstim?
  numEstimacion       Int //x
  period              Int 
  formulatedBy        String //c
  authorizedBy        String //c
  amount              Float 
  firstAmount         Float
  lastAmount          Float
  actualAmount        Float
  estimatedBalance    Float
  estimatedAmount     Float
  anticipatedAmount   Float
  subtotal            Float
  iva                 Float
  withholodingActual  Float
  withholdingAnterior Float
  neto                Float
}

model resumenEstim {
  id         String        @id @default(uuid())
  testims    Float        
  anticipo   Float
  subtotal1  Float
  iva        Float
  retencion  Float
  subtotal2  Float
  caratula   caratulaEstim @relation(fields: [caratulaId], references: [id])
  caratulaId String        @unique
}

model Report {
  id           String         @id @default(uuid())
  name         String
  date         DateTime
  url          String
  frontProject FrontProject[]
}

model Multimedia {
  id           String         @id @default(uuid())
  name         String
  date         DateTime
  url          String
  path         String
  FrontProject FrontProject[]
}
